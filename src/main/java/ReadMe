@Component Vs  @Bean?
@Component (and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning. 
There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
Control of wiring is quite limited with this approach, since it's purely declarative.

@Component Vs  @Bean?
@Component (and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning. 
There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
Control of wiring is quite limited with this approach, since it's purely declarative.


@Bean is used to explicitly declare a single bean, rather than letting Spring do it automatically as above. 
It decouples the declaration of the bean from the class definition, and lets you create and configure beans exactly
how you choose.

@Component Preferable for component scanning and automatic wiring.
When should you use @Bean?
Sometimes automatic configuration is not an option.
When? Let's imagine that you want to wire components from 3rd-party libraries
(you don't have the source code so you can't annotate its classes with @Component), 
so automatic configuration is not possible.

The @Bean annotation returns an object that spring should register as bean in application context.
The body of the method bears the logic responsible for creating the instance.

 @Autowired Vs @Inject
 @Autowired is Spring's own (legacy) annotation.
 @Inject is part of a new Java technology called CDI that defines a standard for dependency injection similar to Spring.
 
  